# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  lane :ci do
    branch = git_branch
    puts("*************| 当前branch #{branch} |*************")
    # 配置环境
    keychain_name = "easy-build"
    keychain_password = "travis"
    # 设置session 规避两步验证码
    # ENV["FASTLANE_SESSION"] = File.read("session.txt")
    # 创建临时钥匙串
    create_keychain(
    name: keychain_name,
    password: keychain_password,
    default_keychain: true,
    unlock: true,
    timeout: 3600,
    add_to_search_list: true
    )

    import_certificate(
    certificate_path: "./fastlane/certs/dist.p12",
    certificate_password: ENV["Cert_PassWord"],
    keychain_name: keychain_name,
    keychain_password: keychain_password
    )
    import_certificate(
    certificate_path: "./fastlane/certs/dev.p12",
    certificate_password: ENV["Cert_PassWord"],
    keychain_name: keychain_name,
    keychain_password: keychain_password
    )
    # 拉取证书
    system "sh ./load_provision.sh"
    
    # sigh(app_identifier: "name.wxz.easy",
    #   username: "245328522@qq.com")
    if branch.start_with? "master"
       beta
    elsif branch.start_with? "release"
       release
    end
 end

  lane :release do
    # 编译app
    buildApp()
    # 上传app
    upload_to_app_store(
    skip_screenshots: true,
    skip_metadata: false,
    reject_if_possible: true,
    # skip_binary_upload: true,
    force: true,
    app_review_information: {
       first_name: 'Zhang',
       last_name: 'Chi',
       phone_number: '+86 15274737502',
       email_address: 'zc@zhangchione.cc',
       demo_user: '',
       demo_password: '',
       notes: ''
    },
    submit_for_review: true,
    submission_information: {
       add_id_info_limits_tracking: true,
       add_id_info_serves_ads: false,
       add_id_info_tracks_action: true,
       add_id_info_tracks_install: true,
       add_id_info_uses_idfa: true,
       content_rights_has_rights: true,
       content_rights_contains_third_party_content: true,
       export_compliance_platform: 'ios',
       export_compliance_compliance_required: false,
       export_compliance_encryption_updated: false,
       export_compliance_app_type: nil,
       export_compliance_uses_encryption: false,
       export_compliance_is_exempt: false,
       export_compliance_contains_third_party_cryptography: false,
       export_compliance_contains_proprietary_cryptography: false,
       export_compliance_available_on_french_store: false
    },
    release_notes: {'default' => File.read("Changelog.txt"),
                    'zh-Hans' => File.read("Changelog.txt"),
                    'en-US' => File.read("Changelog.txt")}
    )
    # 更新版本tag
    add_git_tag
    if is_ci?
      system "git push https://zhangchione:${GH_Token}@github.com/zhangchione/CareFree.git --tags"
   else
      push_to_git_remote
   end
    # 上传dysm
    # crashlytics(api_token: "4dbecc6fc97e57d5b10c0ee7c02129982f65e060",
    # build_secret: "b65c4742a71ef77d7fdae96dd8d4822f16a2e8ab5356912390e6a3027cbe5cbe")
 end


  desc "Push a new beta build to TestFlight"
  lane :beta do
     # 编译app
     buildApp()
     # 上传
     upload_to_testflight(
     beta_app_feedback_email: "zc@zhangchione.cc",
     beta_app_description: "",
     notify_external_testers: false,
     distribute_external: true,
     changelog: File.read("Changelog.txt"),
     groups: ["testflight.top","Price Tag","其他渠道"],
     skip_waiting_for_build_processing: true,
     )
     # 更新版本tag
     add_git_tag
     if is_ci?
      system "git push https://zhangchione:${GH_Token}@github.com/zhangchione/CareFree.git --tags"
      # system "git push https://isnine:${GH_Token}@github.com/isnine/easy.git --tags"
    else
       push_to_git_remote
    end
     # 上传dysm
    #  crashlytics(api_token: "4dbecc6fc97e57d5b10c0ee7c02129982f65e060",
    #  build_secret: "b65c4742a71ef77d7fdae96dd8d4822f16a2e8ab5356912390e6a3027cbe5cbe")
  end

end


# 编译当前app
def buildApp
    # 更改build号
    updateProjectBuildNumber
    # 编译
    build_app(workspace: "CareFree.xcworkspace", 
               scheme: "CareFree",
               export_options: {
                  provisioningProfiles: {"com.zhangchione.carefree"=>"CareFree_distribution"}
               },
            )
end

# 跟新版本号
def updateProjectBuildNumber
  currentTime = Time.new.strftime("%y%m%d")
  build = latest_testflight_build_number(version: get_version_number)
  puts("*************| Tag: #{build} |*************")
  buildStr = build.to_s
  if buildStr.include?"#{currentTime}"
     # => 为当天版本 计算迭代版本号
     lastStr = buildStr[buildStr.length-2..buildStr.length-1]
     lastNum = lastStr.to_i
     lastNum = lastNum + 1
     lastStr = lastNum.to_s
     if lastNum < 10
        lastStr = lastStr.insert(0,"0")
     end
     build = "#{currentTime}#{lastStr}"
  else
     # => 非当天版本 build 号重置
     build = "#{currentTime}01"
  end
  puts("*************| 更新build #{build} |*************")
  # => 更改项目 build 号
  increment_build_number(
  build_number: "#{build}"
  )
end